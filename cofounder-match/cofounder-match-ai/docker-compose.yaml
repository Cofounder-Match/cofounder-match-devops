

services:
  app:
    build: .
    container_name: flask_app
    restart: always
    depends_on:
      - db
      - redis
      - rabbitmq
    env_file: .env
    environment:
      BACKEND_URL: ${BACKEND_URL}
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    entrypoint: ["sh", "-c", "flask db upgrade && python run.py"]

  celery_worker:
    build: .
    container_name: celery_worker
    restart: always
    depends_on:
      - app
      - redis
      - rabbitmq
    env_file: .env
    environment:
      BACKEND_URL: ${BACKEND_URL}
    volumes:
      - .:/app
    entrypoint: ["celery", "-A", "run_celery", "worker", "--loglevel=info"]

  celery_beat:
    build: .
    container_name: celery_beat
    restart: always
    depends_on:
      - app
      - celery_worker
    env_file: .env
    environment:
      BACKEND_URL: ${BACKEND_URL}
    volumes:
      - .:/app
    entrypoint: ["celery", "-A", "run_celery", "beat", "--loglevel=info"]

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"

  redis:
    image: "redis:latest"
    container_name: redis
    restart: always
    ports:
      - "6379:6379"

  db:
    image: "postgres:15"
    container_name: postgres_db
    restart: always
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  hasura:
    image: "hasura/graphql-engine:v2.28.0"
    container_name: hasura
    restart: always
    depends_on:
      - db
    ports:
      - "8080:8080"
    env_file: .env
    environment:
      HASURA_GRAPHQL_DATABASE_URL: ${DATABASE_URI}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: "your_secret_key"
      BACKEND_URL: ${BACKEND_URL}

volumes:
  postgres_data:
